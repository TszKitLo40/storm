/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChangeDistributionService {

  public interface Iface {

    public void changeNumberOfElements(int numberofElements) throws org.apache.thrift.TException;

    public void changeExponent(double exponent) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void changeNumberOfElements(int numberofElements, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.changeNumberOfElements_call> resultHandler) throws org.apache.thrift.TException;

    public void changeExponent(double exponent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.changeExponent_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void changeNumberOfElements(int numberofElements) throws org.apache.thrift.TException
    {
      send_changeNumberOfElements(numberofElements);
      recv_changeNumberOfElements();
    }

    public void send_changeNumberOfElements(int numberofElements) throws org.apache.thrift.TException
    {
      changeNumberOfElements_args args = new changeNumberOfElements_args();
      args.setNumberofElements(numberofElements);
      sendBase("changeNumberOfElements", args);
    }

    public void recv_changeNumberOfElements() throws org.apache.thrift.TException
    {
      changeNumberOfElements_result result = new changeNumberOfElements_result();
      receiveBase(result, "changeNumberOfElements");
      return;
    }

    public void changeExponent(double exponent) throws org.apache.thrift.TException
    {
      send_changeExponent(exponent);
      recv_changeExponent();
    }

    public void send_changeExponent(double exponent) throws org.apache.thrift.TException
    {
      changeExponent_args args = new changeExponent_args();
      args.setExponent(exponent);
      sendBase("changeExponent", args);
    }

    public void recv_changeExponent() throws org.apache.thrift.TException
    {
      changeExponent_result result = new changeExponent_result();
      receiveBase(result, "changeExponent");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void changeNumberOfElements(int numberofElements, org.apache.thrift.async.AsyncMethodCallback<changeNumberOfElements_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeNumberOfElements_call method_call = new changeNumberOfElements_call(numberofElements, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeNumberOfElements_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int numberofElements;
      public changeNumberOfElements_call(int numberofElements, org.apache.thrift.async.AsyncMethodCallback<changeNumberOfElements_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numberofElements = numberofElements;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeNumberOfElements", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeNumberOfElements_args args = new changeNumberOfElements_args();
        args.setNumberofElements(numberofElements);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_changeNumberOfElements();
      }
    }

    public void changeExponent(double exponent, org.apache.thrift.async.AsyncMethodCallback<changeExponent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeExponent_call method_call = new changeExponent_call(exponent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeExponent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double exponent;
      public changeExponent_call(double exponent, org.apache.thrift.async.AsyncMethodCallback<changeExponent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exponent = exponent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeExponent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeExponent_args args = new changeExponent_args();
        args.setExponent(exponent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_changeExponent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("changeNumberOfElements", new changeNumberOfElements());
      processMap.put("changeExponent", new changeExponent());
      return processMap;
    }

    public static class changeNumberOfElements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeNumberOfElements_args> {
      public changeNumberOfElements() {
        super("changeNumberOfElements");
      }

      public changeNumberOfElements_args getEmptyArgsInstance() {
        return new changeNumberOfElements_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeNumberOfElements_result getResult(I iface, changeNumberOfElements_args args) throws org.apache.thrift.TException {
        changeNumberOfElements_result result = new changeNumberOfElements_result();
        iface.changeNumberOfElements(args.numberofElements);
        return result;
      }
    }

    public static class changeExponent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeExponent_args> {
      public changeExponent() {
        super("changeExponent");
      }

      public changeExponent_args getEmptyArgsInstance() {
        return new changeExponent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeExponent_result getResult(I iface, changeExponent_args args) throws org.apache.thrift.TException {
        changeExponent_result result = new changeExponent_result();
        iface.changeExponent(args.exponent);
        return result;
      }
    }

  }

  public static class changeNumberOfElements_args implements org.apache.thrift.TBase<changeNumberOfElements_args, changeNumberOfElements_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeNumberOfElements_args");

    private static final org.apache.thrift.protocol.TField NUMBEROF_ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberofElements", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeNumberOfElements_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeNumberOfElements_argsTupleSchemeFactory());
    }

    public int numberofElements; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMBEROF_ELEMENTS((short)1, "numberofElements");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMBEROF_ELEMENTS
            return NUMBEROF_ELEMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBEROFELEMENTS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMBEROF_ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("numberofElements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeNumberOfElements_args.class, metaDataMap);
    }

    public changeNumberOfElements_args() {
    }

    public changeNumberOfElements_args(
      int numberofElements)
    {
      this();
      this.numberofElements = numberofElements;
      setNumberofElementsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeNumberOfElements_args(changeNumberOfElements_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numberofElements = other.numberofElements;
    }

    public changeNumberOfElements_args deepCopy() {
      return new changeNumberOfElements_args(this);
    }

    @Override
    public void clear() {
      setNumberofElementsIsSet(false);
      this.numberofElements = 0;
    }

    public int getNumberofElements() {
      return this.numberofElements;
    }

    public changeNumberOfElements_args setNumberofElements(int numberofElements) {
      this.numberofElements = numberofElements;
      setNumberofElementsIsSet(true);
      return this;
    }

    public void unsetNumberofElements() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID);
    }

    /** Returns true if field numberofElements is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberofElements() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID);
    }

    public void setNumberofElementsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFELEMENTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMBEROF_ELEMENTS:
        if (value == null) {
          unsetNumberofElements();
        } else {
          setNumberofElements((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMBEROF_ELEMENTS:
        return Integer.valueOf(getNumberofElements());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMBEROF_ELEMENTS:
        return isSetNumberofElements();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeNumberOfElements_args)
        return this.equals((changeNumberOfElements_args)that);
      return false;
    }

    public boolean equals(changeNumberOfElements_args that) {
      if (that == null)
        return false;

      boolean this_present_numberofElements = true;
      boolean that_present_numberofElements = true;
      if (this_present_numberofElements || that_present_numberofElements) {
        if (!(this_present_numberofElements && that_present_numberofElements))
          return false;
        if (this.numberofElements != that.numberofElements)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeNumberOfElements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeNumberOfElements_args typedOther = (changeNumberOfElements_args)other;

      lastComparison = Boolean.valueOf(isSetNumberofElements()).compareTo(typedOther.isSetNumberofElements());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberofElements()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberofElements, typedOther.numberofElements);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeNumberOfElements_args(");
      boolean first = true;

      sb.append("numberofElements:");
      sb.append(this.numberofElements);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeNumberOfElements_argsStandardSchemeFactory implements SchemeFactory {
      public changeNumberOfElements_argsStandardScheme getScheme() {
        return new changeNumberOfElements_argsStandardScheme();
      }
    }

    private static class changeNumberOfElements_argsStandardScheme extends StandardScheme<changeNumberOfElements_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeNumberOfElements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMBEROF_ELEMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numberofElements = iprot.readI32();
                struct.setNumberofElementsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeNumberOfElements_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBEROF_ELEMENTS_FIELD_DESC);
        oprot.writeI32(struct.numberofElements);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeNumberOfElements_argsTupleSchemeFactory implements SchemeFactory {
      public changeNumberOfElements_argsTupleScheme getScheme() {
        return new changeNumberOfElements_argsTupleScheme();
      }
    }

    private static class changeNumberOfElements_argsTupleScheme extends TupleScheme<changeNumberOfElements_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeNumberOfElements_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumberofElements()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumberofElements()) {
          oprot.writeI32(struct.numberofElements);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeNumberOfElements_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numberofElements = iprot.readI32();
          struct.setNumberofElementsIsSet(true);
        }
      }
    }

  }

  public static class changeNumberOfElements_result implements org.apache.thrift.TBase<changeNumberOfElements_result, changeNumberOfElements_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeNumberOfElements_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeNumberOfElements_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeNumberOfElements_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeNumberOfElements_result.class, metaDataMap);
    }

    public changeNumberOfElements_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeNumberOfElements_result(changeNumberOfElements_result other) {
    }

    public changeNumberOfElements_result deepCopy() {
      return new changeNumberOfElements_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeNumberOfElements_result)
        return this.equals((changeNumberOfElements_result)that);
      return false;
    }

    public boolean equals(changeNumberOfElements_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeNumberOfElements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeNumberOfElements_result typedOther = (changeNumberOfElements_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeNumberOfElements_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeNumberOfElements_resultStandardSchemeFactory implements SchemeFactory {
      public changeNumberOfElements_resultStandardScheme getScheme() {
        return new changeNumberOfElements_resultStandardScheme();
      }
    }

    private static class changeNumberOfElements_resultStandardScheme extends StandardScheme<changeNumberOfElements_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeNumberOfElements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeNumberOfElements_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeNumberOfElements_resultTupleSchemeFactory implements SchemeFactory {
      public changeNumberOfElements_resultTupleScheme getScheme() {
        return new changeNumberOfElements_resultTupleScheme();
      }
    }

    private static class changeNumberOfElements_resultTupleScheme extends TupleScheme<changeNumberOfElements_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeNumberOfElements_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeNumberOfElements_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class changeExponent_args implements org.apache.thrift.TBase<changeExponent_args, changeExponent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeExponent_args");

    private static final org.apache.thrift.protocol.TField EXPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("exponent", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeExponent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeExponent_argsTupleSchemeFactory());
    }

    public double exponent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPONENT((short)1, "exponent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPONENT
            return EXPONENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPONENT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPONENT, new org.apache.thrift.meta_data.FieldMetaData("exponent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeExponent_args.class, metaDataMap);
    }

    public changeExponent_args() {
    }

    public changeExponent_args(
      double exponent)
    {
      this();
      this.exponent = exponent;
      setExponentIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeExponent_args(changeExponent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.exponent = other.exponent;
    }

    public changeExponent_args deepCopy() {
      return new changeExponent_args(this);
    }

    @Override
    public void clear() {
      setExponentIsSet(false);
      this.exponent = 0.0;
    }

    public double getExponent() {
      return this.exponent;
    }

    public changeExponent_args setExponent(double exponent) {
      this.exponent = exponent;
      setExponentIsSet(true);
      return this;
    }

    public void unsetExponent() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPONENT_ISSET_ID);
    }

    /** Returns true if field exponent is set (has been assigned a value) and false otherwise */
    public boolean isSetExponent() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPONENT_ISSET_ID);
    }

    public void setExponentIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPONENT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPONENT:
        if (value == null) {
          unsetExponent();
        } else {
          setExponent((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPONENT:
        return Double.valueOf(getExponent());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPONENT:
        return isSetExponent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeExponent_args)
        return this.equals((changeExponent_args)that);
      return false;
    }

    public boolean equals(changeExponent_args that) {
      if (that == null)
        return false;

      boolean this_present_exponent = true;
      boolean that_present_exponent = true;
      if (this_present_exponent || that_present_exponent) {
        if (!(this_present_exponent && that_present_exponent))
          return false;
        if (this.exponent != that.exponent)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeExponent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeExponent_args typedOther = (changeExponent_args)other;

      lastComparison = Boolean.valueOf(isSetExponent()).compareTo(typedOther.isSetExponent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExponent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exponent, typedOther.exponent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeExponent_args(");
      boolean first = true;

      sb.append("exponent:");
      sb.append(this.exponent);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeExponent_argsStandardSchemeFactory implements SchemeFactory {
      public changeExponent_argsStandardScheme getScheme() {
        return new changeExponent_argsStandardScheme();
      }
    }

    private static class changeExponent_argsStandardScheme extends StandardScheme<changeExponent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeExponent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPONENT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.exponent = iprot.readDouble();
                struct.setExponentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeExponent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXPONENT_FIELD_DESC);
        oprot.writeDouble(struct.exponent);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeExponent_argsTupleSchemeFactory implements SchemeFactory {
      public changeExponent_argsTupleScheme getScheme() {
        return new changeExponent_argsTupleScheme();
      }
    }

    private static class changeExponent_argsTupleScheme extends TupleScheme<changeExponent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeExponent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExponent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExponent()) {
          oprot.writeDouble(struct.exponent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeExponent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exponent = iprot.readDouble();
          struct.setExponentIsSet(true);
        }
      }
    }

  }

  public static class changeExponent_result implements org.apache.thrift.TBase<changeExponent_result, changeExponent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeExponent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeExponent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeExponent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeExponent_result.class, metaDataMap);
    }

    public changeExponent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeExponent_result(changeExponent_result other) {
    }

    public changeExponent_result deepCopy() {
      return new changeExponent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeExponent_result)
        return this.equals((changeExponent_result)that);
      return false;
    }

    public boolean equals(changeExponent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeExponent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeExponent_result typedOther = (changeExponent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeExponent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeExponent_resultStandardSchemeFactory implements SchemeFactory {
      public changeExponent_resultStandardScheme getScheme() {
        return new changeExponent_resultStandardScheme();
      }
    }

    private static class changeExponent_resultStandardScheme extends StandardScheme<changeExponent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeExponent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeExponent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeExponent_resultTupleSchemeFactory implements SchemeFactory {
      public changeExponent_resultTupleScheme getScheme() {
        return new changeExponent_resultTupleScheme();
      }
    }

    private static class changeExponent_resultTupleScheme extends TupleScheme<changeExponent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeExponent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeExponent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
