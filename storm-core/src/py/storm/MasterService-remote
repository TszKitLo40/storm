#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MasterService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   getAllHostNames()'
  print '  void migrateTasks(string originalHostName, string targetHostName, i32 taskId, i32 routeNo)'
  print '  void createRouting(string hostName, i32 taskid, i32 routeNo, string type)'
  print '  void withdrawRemoteRoute(i32 taskid, i32 route)'
  print '  double reportTaskThroughput(i32 taskid)'
  print '  string queryDistribution(i32 taskid)'
  print '  string getLiveWorkers()'
  print '  string queryRoutingTable(i32 taskid)'
  print '  void reassignBucketToRoute(i32 taskid, i32 bucket, i32 originalRoute, i32 newRoute)'
  print '  string optimizeBucketToRoute(i32 taskid)'
  print '  string optimizeBucketToRouteWithThreshold(i32 taskid, double threshold)'
  print '  string subtaskLevelLoadBalancing(i32 taskid)'
  print '  string workerLevelLoadBalancing(i32 taskid)'
  print '  string queryWorkerLoad()'
  print '  string naiveWorkerLevelLoadBalancing(i32 taskid)'
  print '  void scalingOutSubtask(i32 taskid)'
  print '  bool scalingInSubtask(i32 taskid)'
  print '  void logOnMaster(string fro, string msg)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MasterService.Client(protocol)
transport.open()

if cmd == 'getAllHostNames':
  if len(args) != 0:
    print 'getAllHostNames requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllHostNames())

elif cmd == 'migrateTasks':
  if len(args) != 4:
    print 'migrateTasks requires 4 args'
    sys.exit(1)
  pp.pprint(client.migrateTasks(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'createRouting':
  if len(args) != 4:
    print 'createRouting requires 4 args'
    sys.exit(1)
  pp.pprint(client.createRouting(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'withdrawRemoteRoute':
  if len(args) != 2:
    print 'withdrawRemoteRoute requires 2 args'
    sys.exit(1)
  pp.pprint(client.withdrawRemoteRoute(eval(args[0]),eval(args[1]),))

elif cmd == 'reportTaskThroughput':
  if len(args) != 1:
    print 'reportTaskThroughput requires 1 args'
    sys.exit(1)
  pp.pprint(client.reportTaskThroughput(eval(args[0]),))

elif cmd == 'queryDistribution':
  if len(args) != 1:
    print 'queryDistribution requires 1 args'
    sys.exit(1)
  pp.pprint(client.queryDistribution(eval(args[0]),))

elif cmd == 'getLiveWorkers':
  if len(args) != 0:
    print 'getLiveWorkers requires 0 args'
    sys.exit(1)
  pp.pprint(client.getLiveWorkers())

elif cmd == 'queryRoutingTable':
  if len(args) != 1:
    print 'queryRoutingTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.queryRoutingTable(eval(args[0]),))

elif cmd == 'reassignBucketToRoute':
  if len(args) != 4:
    print 'reassignBucketToRoute requires 4 args'
    sys.exit(1)
  pp.pprint(client.reassignBucketToRoute(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'optimizeBucketToRoute':
  if len(args) != 1:
    print 'optimizeBucketToRoute requires 1 args'
    sys.exit(1)
  pp.pprint(client.optimizeBucketToRoute(eval(args[0]),))

elif cmd == 'optimizeBucketToRouteWithThreshold':
  if len(args) != 2:
    print 'optimizeBucketToRouteWithThreshold requires 2 args'
    sys.exit(1)
  pp.pprint(client.optimizeBucketToRouteWithThreshold(eval(args[0]),eval(args[1]),))

elif cmd == 'subtaskLevelLoadBalancing':
  if len(args) != 1:
    print 'subtaskLevelLoadBalancing requires 1 args'
    sys.exit(1)
  pp.pprint(client.subtaskLevelLoadBalancing(eval(args[0]),))

elif cmd == 'workerLevelLoadBalancing':
  if len(args) != 1:
    print 'workerLevelLoadBalancing requires 1 args'
    sys.exit(1)
  pp.pprint(client.workerLevelLoadBalancing(eval(args[0]),))

elif cmd == 'queryWorkerLoad':
  if len(args) != 0:
    print 'queryWorkerLoad requires 0 args'
    sys.exit(1)
  pp.pprint(client.queryWorkerLoad())

elif cmd == 'naiveWorkerLevelLoadBalancing':
  if len(args) != 1:
    print 'naiveWorkerLevelLoadBalancing requires 1 args'
    sys.exit(1)
  pp.pprint(client.naiveWorkerLevelLoadBalancing(eval(args[0]),))

elif cmd == 'scalingOutSubtask':
  if len(args) != 1:
    print 'scalingOutSubtask requires 1 args'
    sys.exit(1)
  pp.pprint(client.scalingOutSubtask(eval(args[0]),))

elif cmd == 'scalingInSubtask':
  if len(args) != 1:
    print 'scalingInSubtask requires 1 args'
    sys.exit(1)
  pp.pprint(client.scalingInSubtask(eval(args[0]),))

elif cmd == 'logOnMaster':
  if len(args) != 2:
    print 'logOnMaster requires 2 args'
    sys.exit(1)
  pp.pprint(client.logOnMaster(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
