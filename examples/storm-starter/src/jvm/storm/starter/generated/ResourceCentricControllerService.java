/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package storm.starter.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResourceCentricControllerService {

  public interface Iface {

    public void shardReassignment(int sourceTaskIndex, int targetTaskIndex, int shardId) throws org.apache.thrift.TException;

    public void scalingIn() throws org.apache.thrift.TException;

    public void scalingOut() throws org.apache.thrift.TException;

    public void loadBalancing() throws org.apache.thrift.TException;

    public String queryRoutingTable() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void shardReassignment(int sourceTaskIndex, int targetTaskIndex, int shardId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shardReassignment_call> resultHandler) throws org.apache.thrift.TException;

    public void scalingIn(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scalingIn_call> resultHandler) throws org.apache.thrift.TException;

    public void scalingOut(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scalingOut_call> resultHandler) throws org.apache.thrift.TException;

    public void loadBalancing(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadBalancing_call> resultHandler) throws org.apache.thrift.TException;

    public void queryRoutingTable(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryRoutingTable_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void shardReassignment(int sourceTaskIndex, int targetTaskIndex, int shardId) throws org.apache.thrift.TException
    {
      send_shardReassignment(sourceTaskIndex, targetTaskIndex, shardId);
      recv_shardReassignment();
    }

    public void send_shardReassignment(int sourceTaskIndex, int targetTaskIndex, int shardId) throws org.apache.thrift.TException
    {
      shardReassignment_args args = new shardReassignment_args();
      args.setSourceTaskIndex(sourceTaskIndex);
      args.setTargetTaskIndex(targetTaskIndex);
      args.setShardId(shardId);
      sendBase("shardReassignment", args);
    }

    public void recv_shardReassignment() throws org.apache.thrift.TException
    {
      shardReassignment_result result = new shardReassignment_result();
      receiveBase(result, "shardReassignment");
      return;
    }

    public void scalingIn() throws org.apache.thrift.TException
    {
      send_scalingIn();
      recv_scalingIn();
    }

    public void send_scalingIn() throws org.apache.thrift.TException
    {
      scalingIn_args args = new scalingIn_args();
      sendBase("scalingIn", args);
    }

    public void recv_scalingIn() throws org.apache.thrift.TException
    {
      scalingIn_result result = new scalingIn_result();
      receiveBase(result, "scalingIn");
      return;
    }

    public void scalingOut() throws org.apache.thrift.TException
    {
      send_scalingOut();
      recv_scalingOut();
    }

    public void send_scalingOut() throws org.apache.thrift.TException
    {
      scalingOut_args args = new scalingOut_args();
      sendBase("scalingOut", args);
    }

    public void recv_scalingOut() throws org.apache.thrift.TException
    {
      scalingOut_result result = new scalingOut_result();
      receiveBase(result, "scalingOut");
      return;
    }

    public void loadBalancing() throws org.apache.thrift.TException
    {
      send_loadBalancing();
      recv_loadBalancing();
    }

    public void send_loadBalancing() throws org.apache.thrift.TException
    {
      loadBalancing_args args = new loadBalancing_args();
      sendBase("loadBalancing", args);
    }

    public void recv_loadBalancing() throws org.apache.thrift.TException
    {
      loadBalancing_result result = new loadBalancing_result();
      receiveBase(result, "loadBalancing");
      return;
    }

    public String queryRoutingTable() throws org.apache.thrift.TException
    {
      send_queryRoutingTable();
      return recv_queryRoutingTable();
    }

    public void send_queryRoutingTable() throws org.apache.thrift.TException
    {
      queryRoutingTable_args args = new queryRoutingTable_args();
      sendBase("queryRoutingTable", args);
    }

    public String recv_queryRoutingTable() throws org.apache.thrift.TException
    {
      queryRoutingTable_result result = new queryRoutingTable_result();
      receiveBase(result, "queryRoutingTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRoutingTable failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void shardReassignment(int sourceTaskIndex, int targetTaskIndex, int shardId, org.apache.thrift.async.AsyncMethodCallback<shardReassignment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shardReassignment_call method_call = new shardReassignment_call(sourceTaskIndex, targetTaskIndex, shardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shardReassignment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int sourceTaskIndex;
      private int targetTaskIndex;
      private int shardId;
      public shardReassignment_call(int sourceTaskIndex, int targetTaskIndex, int shardId, org.apache.thrift.async.AsyncMethodCallback<shardReassignment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceTaskIndex = sourceTaskIndex;
        this.targetTaskIndex = targetTaskIndex;
        this.shardId = shardId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shardReassignment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shardReassignment_args args = new shardReassignment_args();
        args.setSourceTaskIndex(sourceTaskIndex);
        args.setTargetTaskIndex(targetTaskIndex);
        args.setShardId(shardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shardReassignment();
      }
    }

    public void scalingIn(org.apache.thrift.async.AsyncMethodCallback<scalingIn_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scalingIn_call method_call = new scalingIn_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scalingIn_call extends org.apache.thrift.async.TAsyncMethodCall {
      public scalingIn_call(org.apache.thrift.async.AsyncMethodCallback<scalingIn_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scalingIn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scalingIn_args args = new scalingIn_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_scalingIn();
      }
    }

    public void scalingOut(org.apache.thrift.async.AsyncMethodCallback<scalingOut_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scalingOut_call method_call = new scalingOut_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scalingOut_call extends org.apache.thrift.async.TAsyncMethodCall {
      public scalingOut_call(org.apache.thrift.async.AsyncMethodCallback<scalingOut_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scalingOut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scalingOut_args args = new scalingOut_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_scalingOut();
      }
    }

    public void loadBalancing(org.apache.thrift.async.AsyncMethodCallback<loadBalancing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadBalancing_call method_call = new loadBalancing_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadBalancing_call extends org.apache.thrift.async.TAsyncMethodCall {
      public loadBalancing_call(org.apache.thrift.async.AsyncMethodCallback<loadBalancing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadBalancing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadBalancing_args args = new loadBalancing_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_loadBalancing();
      }
    }

    public void queryRoutingTable(org.apache.thrift.async.AsyncMethodCallback<queryRoutingTable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRoutingTable_call method_call = new queryRoutingTable_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRoutingTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryRoutingTable_call(org.apache.thrift.async.AsyncMethodCallback<queryRoutingTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRoutingTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRoutingTable_args args = new queryRoutingTable_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRoutingTable();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("shardReassignment", new shardReassignment());
      processMap.put("scalingIn", new scalingIn());
      processMap.put("scalingOut", new scalingOut());
      processMap.put("loadBalancing", new loadBalancing());
      processMap.put("queryRoutingTable", new queryRoutingTable());
      return processMap;
    }

    public static class shardReassignment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shardReassignment_args> {
      public shardReassignment() {
        super("shardReassignment");
      }

      public shardReassignment_args getEmptyArgsInstance() {
        return new shardReassignment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shardReassignment_result getResult(I iface, shardReassignment_args args) throws org.apache.thrift.TException {
        shardReassignment_result result = new shardReassignment_result();
        iface.shardReassignment(args.sourceTaskIndex, args.targetTaskIndex, args.shardId);
        return result;
      }
    }

    public static class scalingIn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scalingIn_args> {
      public scalingIn() {
        super("scalingIn");
      }

      public scalingIn_args getEmptyArgsInstance() {
        return new scalingIn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scalingIn_result getResult(I iface, scalingIn_args args) throws org.apache.thrift.TException {
        scalingIn_result result = new scalingIn_result();
        iface.scalingIn();
        return result;
      }
    }

    public static class scalingOut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scalingOut_args> {
      public scalingOut() {
        super("scalingOut");
      }

      public scalingOut_args getEmptyArgsInstance() {
        return new scalingOut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scalingOut_result getResult(I iface, scalingOut_args args) throws org.apache.thrift.TException {
        scalingOut_result result = new scalingOut_result();
        iface.scalingOut();
        return result;
      }
    }

    public static class loadBalancing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadBalancing_args> {
      public loadBalancing() {
        super("loadBalancing");
      }

      public loadBalancing_args getEmptyArgsInstance() {
        return new loadBalancing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadBalancing_result getResult(I iface, loadBalancing_args args) throws org.apache.thrift.TException {
        loadBalancing_result result = new loadBalancing_result();
        iface.loadBalancing();
        return result;
      }
    }

    public static class queryRoutingTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRoutingTable_args> {
      public queryRoutingTable() {
        super("queryRoutingTable");
      }

      public queryRoutingTable_args getEmptyArgsInstance() {
        return new queryRoutingTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRoutingTable_result getResult(I iface, queryRoutingTable_args args) throws org.apache.thrift.TException {
        queryRoutingTable_result result = new queryRoutingTable_result();
        result.success = iface.queryRoutingTable();
        return result;
      }
    }

  }

  public static class shardReassignment_args implements org.apache.thrift.TBase<shardReassignment_args, shardReassignment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shardReassignment_args");

    private static final org.apache.thrift.protocol.TField SOURCE_TASK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTaskIndex", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_TASK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("targetTaskIndex", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardReassignment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardReassignment_argsTupleSchemeFactory());
    }

    public int sourceTaskIndex; // required
    public int targetTaskIndex; // required
    public int shardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_TASK_INDEX((short)1, "sourceTaskIndex"),
      TARGET_TASK_INDEX((short)2, "targetTaskIndex"),
      SHARD_ID((short)3, "shardId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_TASK_INDEX
            return SOURCE_TASK_INDEX;
          case 2: // TARGET_TASK_INDEX
            return TARGET_TASK_INDEX;
          case 3: // SHARD_ID
            return SHARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCETASKINDEX_ISSET_ID = 0;
    private static final int __TARGETTASKINDEX_ISSET_ID = 1;
    private static final int __SHARDID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_TASK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("sourceTaskIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TARGET_TASK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("targetTaskIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shardReassignment_args.class, metaDataMap);
    }

    public shardReassignment_args() {
    }

    public shardReassignment_args(
      int sourceTaskIndex,
      int targetTaskIndex,
      int shardId)
    {
      this();
      this.sourceTaskIndex = sourceTaskIndex;
      setSourceTaskIndexIsSet(true);
      this.targetTaskIndex = targetTaskIndex;
      setTargetTaskIndexIsSet(true);
      this.shardId = shardId;
      setShardIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardReassignment_args(shardReassignment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sourceTaskIndex = other.sourceTaskIndex;
      this.targetTaskIndex = other.targetTaskIndex;
      this.shardId = other.shardId;
    }

    public shardReassignment_args deepCopy() {
      return new shardReassignment_args(this);
    }

    @Override
    public void clear() {
      setSourceTaskIndexIsSet(false);
      this.sourceTaskIndex = 0;
      setTargetTaskIndexIsSet(false);
      this.targetTaskIndex = 0;
      setShardIdIsSet(false);
      this.shardId = 0;
    }

    public int getSourceTaskIndex() {
      return this.sourceTaskIndex;
    }

    public shardReassignment_args setSourceTaskIndex(int sourceTaskIndex) {
      this.sourceTaskIndex = sourceTaskIndex;
      setSourceTaskIndexIsSet(true);
      return this;
    }

    public void unsetSourceTaskIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCETASKINDEX_ISSET_ID);
    }

    /** Returns true if field sourceTaskIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceTaskIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCETASKINDEX_ISSET_ID);
    }

    public void setSourceTaskIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCETASKINDEX_ISSET_ID, value);
    }

    public int getTargetTaskIndex() {
      return this.targetTaskIndex;
    }

    public shardReassignment_args setTargetTaskIndex(int targetTaskIndex) {
      this.targetTaskIndex = targetTaskIndex;
      setTargetTaskIndexIsSet(true);
      return this;
    }

    public void unsetTargetTaskIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETTASKINDEX_ISSET_ID);
    }

    /** Returns true if field targetTaskIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetTaskIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __TARGETTASKINDEX_ISSET_ID);
    }

    public void setTargetTaskIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETTASKINDEX_ISSET_ID, value);
    }

    public int getShardId() {
      return this.shardId;
    }

    public shardReassignment_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_TASK_INDEX:
        if (value == null) {
          unsetSourceTaskIndex();
        } else {
          setSourceTaskIndex((Integer)value);
        }
        break;

      case TARGET_TASK_INDEX:
        if (value == null) {
          unsetTargetTaskIndex();
        } else {
          setTargetTaskIndex((Integer)value);
        }
        break;

      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_TASK_INDEX:
        return Integer.valueOf(getSourceTaskIndex());

      case TARGET_TASK_INDEX:
        return Integer.valueOf(getTargetTaskIndex());

      case SHARD_ID:
        return Integer.valueOf(getShardId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_TASK_INDEX:
        return isSetSourceTaskIndex();
      case TARGET_TASK_INDEX:
        return isSetTargetTaskIndex();
      case SHARD_ID:
        return isSetShardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardReassignment_args)
        return this.equals((shardReassignment_args)that);
      return false;
    }

    public boolean equals(shardReassignment_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceTaskIndex = true;
      boolean that_present_sourceTaskIndex = true;
      if (this_present_sourceTaskIndex || that_present_sourceTaskIndex) {
        if (!(this_present_sourceTaskIndex && that_present_sourceTaskIndex))
          return false;
        if (this.sourceTaskIndex != that.sourceTaskIndex)
          return false;
      }

      boolean this_present_targetTaskIndex = true;
      boolean that_present_targetTaskIndex = true;
      if (this_present_targetTaskIndex || that_present_targetTaskIndex) {
        if (!(this_present_targetTaskIndex && that_present_targetTaskIndex))
          return false;
        if (this.targetTaskIndex != that.targetTaskIndex)
          return false;
      }

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardReassignment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardReassignment_args typedOther = (shardReassignment_args)other;

      lastComparison = Boolean.valueOf(isSetSourceTaskIndex()).compareTo(typedOther.isSetSourceTaskIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceTaskIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTaskIndex, typedOther.sourceTaskIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTargetTaskIndex()).compareTo(typedOther.isSetTargetTaskIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetTaskIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetTaskIndex, typedOther.targetTaskIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(typedOther.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, typedOther.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardReassignment_args(");
      boolean first = true;

      sb.append("sourceTaskIndex:");
      sb.append(this.sourceTaskIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetTaskIndex:");
      sb.append(this.targetTaskIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardReassignment_argsStandardSchemeFactory implements SchemeFactory {
      public shardReassignment_argsStandardScheme getScheme() {
        return new shardReassignment_argsStandardScheme();
      }
    }

    private static class shardReassignment_argsStandardScheme extends StandardScheme<shardReassignment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shardReassignment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_TASK_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sourceTaskIndex = iprot.readI32();
                struct.setSourceTaskIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET_TASK_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.targetTaskIndex = iprot.readI32();
                struct.setTargetTaskIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shardReassignment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOURCE_TASK_INDEX_FIELD_DESC);
        oprot.writeI32(struct.sourceTaskIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TARGET_TASK_INDEX_FIELD_DESC);
        oprot.writeI32(struct.targetTaskIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardReassignment_argsTupleSchemeFactory implements SchemeFactory {
      public shardReassignment_argsTupleScheme getScheme() {
        return new shardReassignment_argsTupleScheme();
      }
    }

    private static class shardReassignment_argsTupleScheme extends TupleScheme<shardReassignment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shardReassignment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceTaskIndex()) {
          optionals.set(0);
        }
        if (struct.isSetTargetTaskIndex()) {
          optionals.set(1);
        }
        if (struct.isSetShardId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSourceTaskIndex()) {
          oprot.writeI32(struct.sourceTaskIndex);
        }
        if (struct.isSetTargetTaskIndex()) {
          oprot.writeI32(struct.targetTaskIndex);
        }
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shardReassignment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sourceTaskIndex = iprot.readI32();
          struct.setSourceTaskIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.targetTaskIndex = iprot.readI32();
          struct.setTargetTaskIndexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
      }
    }

  }

  public static class shardReassignment_result implements org.apache.thrift.TBase<shardReassignment_result, shardReassignment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shardReassignment_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shardReassignment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shardReassignment_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shardReassignment_result.class, metaDataMap);
    }

    public shardReassignment_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shardReassignment_result(shardReassignment_result other) {
    }

    public shardReassignment_result deepCopy() {
      return new shardReassignment_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shardReassignment_result)
        return this.equals((shardReassignment_result)that);
      return false;
    }

    public boolean equals(shardReassignment_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shardReassignment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shardReassignment_result typedOther = (shardReassignment_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shardReassignment_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shardReassignment_resultStandardSchemeFactory implements SchemeFactory {
      public shardReassignment_resultStandardScheme getScheme() {
        return new shardReassignment_resultStandardScheme();
      }
    }

    private static class shardReassignment_resultStandardScheme extends StandardScheme<shardReassignment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shardReassignment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shardReassignment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shardReassignment_resultTupleSchemeFactory implements SchemeFactory {
      public shardReassignment_resultTupleScheme getScheme() {
        return new shardReassignment_resultTupleScheme();
      }
    }

    private static class shardReassignment_resultTupleScheme extends TupleScheme<shardReassignment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shardReassignment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shardReassignment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class scalingIn_args implements org.apache.thrift.TBase<scalingIn_args, scalingIn_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scalingIn_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scalingIn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scalingIn_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scalingIn_args.class, metaDataMap);
    }

    public scalingIn_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scalingIn_args(scalingIn_args other) {
    }

    public scalingIn_args deepCopy() {
      return new scalingIn_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scalingIn_args)
        return this.equals((scalingIn_args)that);
      return false;
    }

    public boolean equals(scalingIn_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scalingIn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scalingIn_args typedOther = (scalingIn_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scalingIn_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scalingIn_argsStandardSchemeFactory implements SchemeFactory {
      public scalingIn_argsStandardScheme getScheme() {
        return new scalingIn_argsStandardScheme();
      }
    }

    private static class scalingIn_argsStandardScheme extends StandardScheme<scalingIn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scalingIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scalingIn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scalingIn_argsTupleSchemeFactory implements SchemeFactory {
      public scalingIn_argsTupleScheme getScheme() {
        return new scalingIn_argsTupleScheme();
      }
    }

    private static class scalingIn_argsTupleScheme extends TupleScheme<scalingIn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scalingIn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scalingIn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class scalingIn_result implements org.apache.thrift.TBase<scalingIn_result, scalingIn_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scalingIn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scalingIn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scalingIn_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scalingIn_result.class, metaDataMap);
    }

    public scalingIn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scalingIn_result(scalingIn_result other) {
    }

    public scalingIn_result deepCopy() {
      return new scalingIn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scalingIn_result)
        return this.equals((scalingIn_result)that);
      return false;
    }

    public boolean equals(scalingIn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scalingIn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scalingIn_result typedOther = (scalingIn_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scalingIn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scalingIn_resultStandardSchemeFactory implements SchemeFactory {
      public scalingIn_resultStandardScheme getScheme() {
        return new scalingIn_resultStandardScheme();
      }
    }

    private static class scalingIn_resultStandardScheme extends StandardScheme<scalingIn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scalingIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scalingIn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scalingIn_resultTupleSchemeFactory implements SchemeFactory {
      public scalingIn_resultTupleScheme getScheme() {
        return new scalingIn_resultTupleScheme();
      }
    }

    private static class scalingIn_resultTupleScheme extends TupleScheme<scalingIn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scalingIn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scalingIn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class scalingOut_args implements org.apache.thrift.TBase<scalingOut_args, scalingOut_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scalingOut_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scalingOut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scalingOut_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scalingOut_args.class, metaDataMap);
    }

    public scalingOut_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scalingOut_args(scalingOut_args other) {
    }

    public scalingOut_args deepCopy() {
      return new scalingOut_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scalingOut_args)
        return this.equals((scalingOut_args)that);
      return false;
    }

    public boolean equals(scalingOut_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scalingOut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scalingOut_args typedOther = (scalingOut_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scalingOut_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scalingOut_argsStandardSchemeFactory implements SchemeFactory {
      public scalingOut_argsStandardScheme getScheme() {
        return new scalingOut_argsStandardScheme();
      }
    }

    private static class scalingOut_argsStandardScheme extends StandardScheme<scalingOut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scalingOut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scalingOut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scalingOut_argsTupleSchemeFactory implements SchemeFactory {
      public scalingOut_argsTupleScheme getScheme() {
        return new scalingOut_argsTupleScheme();
      }
    }

    private static class scalingOut_argsTupleScheme extends TupleScheme<scalingOut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scalingOut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scalingOut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class scalingOut_result implements org.apache.thrift.TBase<scalingOut_result, scalingOut_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scalingOut_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scalingOut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scalingOut_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scalingOut_result.class, metaDataMap);
    }

    public scalingOut_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scalingOut_result(scalingOut_result other) {
    }

    public scalingOut_result deepCopy() {
      return new scalingOut_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scalingOut_result)
        return this.equals((scalingOut_result)that);
      return false;
    }

    public boolean equals(scalingOut_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scalingOut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scalingOut_result typedOther = (scalingOut_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scalingOut_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scalingOut_resultStandardSchemeFactory implements SchemeFactory {
      public scalingOut_resultStandardScheme getScheme() {
        return new scalingOut_resultStandardScheme();
      }
    }

    private static class scalingOut_resultStandardScheme extends StandardScheme<scalingOut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scalingOut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scalingOut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scalingOut_resultTupleSchemeFactory implements SchemeFactory {
      public scalingOut_resultTupleScheme getScheme() {
        return new scalingOut_resultTupleScheme();
      }
    }

    private static class scalingOut_resultTupleScheme extends TupleScheme<scalingOut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scalingOut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scalingOut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadBalancing_args implements org.apache.thrift.TBase<loadBalancing_args, loadBalancing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBalancing_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBalancing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBalancing_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBalancing_args.class, metaDataMap);
    }

    public loadBalancing_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBalancing_args(loadBalancing_args other) {
    }

    public loadBalancing_args deepCopy() {
      return new loadBalancing_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBalancing_args)
        return this.equals((loadBalancing_args)that);
      return false;
    }

    public boolean equals(loadBalancing_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadBalancing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadBalancing_args typedOther = (loadBalancing_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBalancing_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBalancing_argsStandardSchemeFactory implements SchemeFactory {
      public loadBalancing_argsStandardScheme getScheme() {
        return new loadBalancing_argsStandardScheme();
      }
    }

    private static class loadBalancing_argsStandardScheme extends StandardScheme<loadBalancing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBalancing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBalancing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBalancing_argsTupleSchemeFactory implements SchemeFactory {
      public loadBalancing_argsTupleScheme getScheme() {
        return new loadBalancing_argsTupleScheme();
      }
    }

    private static class loadBalancing_argsTupleScheme extends TupleScheme<loadBalancing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBalancing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBalancing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadBalancing_result implements org.apache.thrift.TBase<loadBalancing_result, loadBalancing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBalancing_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBalancing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBalancing_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBalancing_result.class, metaDataMap);
    }

    public loadBalancing_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBalancing_result(loadBalancing_result other) {
    }

    public loadBalancing_result deepCopy() {
      return new loadBalancing_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBalancing_result)
        return this.equals((loadBalancing_result)that);
      return false;
    }

    public boolean equals(loadBalancing_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadBalancing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadBalancing_result typedOther = (loadBalancing_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBalancing_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBalancing_resultStandardSchemeFactory implements SchemeFactory {
      public loadBalancing_resultStandardScheme getScheme() {
        return new loadBalancing_resultStandardScheme();
      }
    }

    private static class loadBalancing_resultStandardScheme extends StandardScheme<loadBalancing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBalancing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBalancing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBalancing_resultTupleSchemeFactory implements SchemeFactory {
      public loadBalancing_resultTupleScheme getScheme() {
        return new loadBalancing_resultTupleScheme();
      }
    }

    private static class loadBalancing_resultTupleScheme extends TupleScheme<loadBalancing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBalancing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBalancing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryRoutingTable_args implements org.apache.thrift.TBase<queryRoutingTable_args, queryRoutingTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRoutingTable_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRoutingTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRoutingTable_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRoutingTable_args.class, metaDataMap);
    }

    public queryRoutingTable_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRoutingTable_args(queryRoutingTable_args other) {
    }

    public queryRoutingTable_args deepCopy() {
      return new queryRoutingTable_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRoutingTable_args)
        return this.equals((queryRoutingTable_args)that);
      return false;
    }

    public boolean equals(queryRoutingTable_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryRoutingTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryRoutingTable_args typedOther = (queryRoutingTable_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRoutingTable_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRoutingTable_argsStandardSchemeFactory implements SchemeFactory {
      public queryRoutingTable_argsStandardScheme getScheme() {
        return new queryRoutingTable_argsStandardScheme();
      }
    }

    private static class queryRoutingTable_argsStandardScheme extends StandardScheme<queryRoutingTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRoutingTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRoutingTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRoutingTable_argsTupleSchemeFactory implements SchemeFactory {
      public queryRoutingTable_argsTupleScheme getScheme() {
        return new queryRoutingTable_argsTupleScheme();
      }
    }

    private static class queryRoutingTable_argsTupleScheme extends TupleScheme<queryRoutingTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRoutingTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRoutingTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryRoutingTable_result implements org.apache.thrift.TBase<queryRoutingTable_result, queryRoutingTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRoutingTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRoutingTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRoutingTable_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRoutingTable_result.class, metaDataMap);
    }

    public queryRoutingTable_result() {
    }

    public queryRoutingTable_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRoutingTable_result(queryRoutingTable_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryRoutingTable_result deepCopy() {
      return new queryRoutingTable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryRoutingTable_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRoutingTable_result)
        return this.equals((queryRoutingTable_result)that);
      return false;
    }

    public boolean equals(queryRoutingTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryRoutingTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryRoutingTable_result typedOther = (queryRoutingTable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRoutingTable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRoutingTable_resultStandardSchemeFactory implements SchemeFactory {
      public queryRoutingTable_resultStandardScheme getScheme() {
        return new queryRoutingTable_resultStandardScheme();
      }
    }

    private static class queryRoutingTable_resultStandardScheme extends StandardScheme<queryRoutingTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRoutingTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRoutingTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRoutingTable_resultTupleSchemeFactory implements SchemeFactory {
      public queryRoutingTable_resultTupleScheme getScheme() {
        return new queryRoutingTable_resultTupleScheme();
      }
    }

    private static class queryRoutingTable_resultTupleScheme extends TupleScheme<queryRoutingTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRoutingTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRoutingTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
